
# Выполнить логические побитовые операции «И», «ИЛИ» и др. над числами 5 и 6.
# Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака.
# Объяснить полученный результат.


# В битовых операциях каждый операнд рассматривается как последовательность двоичных разрядов (бит),
# которые принимают значение 0 или 1.
# Битовые операторы работают следующим образом: берутся два операнда, и к каждой паре соответствующих бит
# для левого и правого операнда применяется данная операция, результатом будет переменная того же типа,
# каждый бит которой есть результат применения соответствующей логической операции к соответствующим
# битам двух операндов.


five = int(5)
six = int(6)


"""
Битовый оператор & (И, AND)
"""

bit_AND = five & six

print(f"Five_2: {bin(five)}")
print(f"Six_2: {bin(six)}")
print(f"AND_2 = {bin(bit_AND)}")
print(f"AND_10 = {bit_AND}", '\n')

# Каждый целочисленный операнд рассматривается как набор бит,
# над любым из которых выполняется побитовая операция «И».
# Результирующее значение любого бита определяется по следующим формулам:
# 0 & 0 = 0
# 0 & 1 = 0
# 1 & 0 = 0
# 1 & 1 = 1


"""
Битовый оператор | (ИЛИ, OR)
"""

bit_OR = five | six

print(f"Five_2: {bin(five)}")
print(f"Six_2: {bin(six)}")
print(f"OR_2 = {bin(bit_OR)}")
print(f"OR_10 = {bit_OR}", '\n')

# Оператор реализует побитовое логическое сложение.
# Для двух операндов битовое ИЛИ выполняется в соответствии c правилами:
# 0 | 0 = 0
# 0 | 1 = 1
# 1 | 0 = 1
# 1 | 1 = 1


"""
Битовый оператор ^ исключающее (ИЛИ, XOR)
"""
bit_XOR = five ^ six

print(f"Five_2: {bin(five)}")
print(f"Six_2: {bin(six)}")
print(f"XOR_2 = {bin(bit_XOR)}")
print(f"XOR_10 = {bit_XOR}", '\n')

# Битовый оператор исключительное ИЛИ выполняет операцию сложения по модулю 2 для любого бита операндов.
# Каждый операнд рассматривается как последовательность бит.
# Результат побитового исключающего ИЛИ определяется по следующим формулам:
# 0 ^ 0 = 0
# 0 ^ 1 = 1
# 1 ^ 0 = 1
# 1 ^ 1 = 0

"""
Битовый оператор ~ (инверсия)
"""
bit_INV = ~five

print(f"Five_2: {bin(five)}")
print(f"INV_2 = {bin(bit_INV)}")
print(f"INV_10 = {bit_INV}", '\n')

# В битовом операторе ~ (инверсия) значение любого бита числа изменяется на противоположное.
# Значение бита 0 устанавливается в 1, а значение 1 устанавливается в 0.
# То есть, положительное число становится отрицательным со смещением -1.
# Также отрицательное число становится положительным со смещением на -1.


"""
Операторы сдвига влево <<, вправо >>
"""
bit_LEFT = five << 2
bit_RIGHT = five >> 2

print(f"Five_2: {bin(five)}", '\n')
print(f"bit_LEFT_2 = {bin(bit_LEFT)}")
print(f"bit_LEFT_10 = {bit_LEFT}", '\n')
print(f"bit_RIGHT_2 = {bin(bit_RIGHT)}")
print(f"bit_RIGHT_10 = {bit_RIGHT}")

# Операторы сдвига влево << и сдвига вправо >> сдвигают каждый бит на
# одну или несколько позиций влево или вправо.


